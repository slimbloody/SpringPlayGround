9. springboot 的启动流程
  1. web容器在启动的时候，会扫描每个jar包下的/META-INF/services/javax.servlet.ServletContainerInitializer
  2. 加载这个文件指定的类SpringServletContainerInitializer
  3. spring的应用一启动会加载感兴趣的WebApplicationInitializer接口的下的所有组件:
  4. 并且为WebApplicationInitializer组件创建对象(组件不是接口，不是抽象类)
    1). AbstractContextLoaderInitializer implement WebApplicationInitializer
    registerContextLoaderListener
      创建根容器:
		  WebApplicationContext rootAppContext = createRootApplicationContext();
		2). AbstractDispatcherServletInitializer extends AbstractContextLoaderInitializer
		相当于SpringMVC前端控制器的初始化器DispatcherServlet
		registerDispatcherServlet(servletContext);
		  创建web容器
		  WebApplicationContext servletAppContext = createServletApplicationContext();

      创建dispatcherServlet
		  FrameworkServlet dispatcherServlet = createDispatcherServlet(servletAppContext);

		  产生dynamic对象
		  ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet);

		  注册mapping
		  registration.addMapping(getServletMappings());
		  getServletMappings() 留给我们自己去实现

		  注册filter
			registerServletFilter(servletContext, filter);

    3. AbstractAnnotationConfigDispatcherServletInitializer extends AbstractDispatcherServletInitializer
    注解方式配置的DispatchServlet 初始化器

    创建根容器
	  WebApplicationContext createRootApplicationContext();
      传入配置类
		  Class<?>[] configClasses = getRootConfigClasses();

      复写了创建根容器的方法
			AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();

			把配置类注册到context上
			context.register(configClasses);

    创建web容器
    WebApplicationContext createServletApplicationContext()

      拿到配置类
		  Class<?>[] configClasses = getServletConfigClasses();

总结:
以注解的方式启动springMVC就需要写一个类继承AbstractAnnotationConfigDispatcherServletInitializer, 实现抽象方法指定DispatcherServlet的配置信息
